@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

@model IEnumerable<IdentityUser>

@{
    ViewData["Title"] = "Manage User Roles";
}

<div class="row" style="margin-top: 9.5vh">
    <h1>Manage User Roles</h1>
    @{
        var allRoles = RoleManager.Roles.ToList();
        var roles = new List<String>();
        foreach (var role in allRoles)
        {
            roles.Add(role.Name);
        }
    }
    @if (SignInManager.IsSignedIn(User) && User.IsInRole("Administrator"))
    {
        foreach (var item in Model)
        {
            var userRoles = await UserManager.GetRolesAsync(item);
            
            <table class="user-table">
                <tr>
                    <td><strong>User</strong></td>
                    <td colspan="2">@Html.DisplayFor(modelItem => item.Email)</td>
                </tr>
                @foreach (var role in userRoles)
                    {
                        <tr>
                            <td><strong>Role</strong></td>
                            <td>
                                @Html.DisplayFor(modelItem => role)
                                <a asp-action="RemoveRole">(Remove)</a>
                            </td>
                        </tr>
                    }
                <tr>
                    <td colspan="2">
                        @Html.DropDownList("Role", new SelectList(roles))
                        @* <a asp-action="AddRole">Add Role</a> *@
                    </td>
                </tr>
            </table>
        }
    }
    else
    {
        <p><strong>Only administators can manage user roles.</strong></p>
    }
</div>