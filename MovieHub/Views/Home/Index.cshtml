@model MovieHub.ViewModels.IndexViewModel
@{
    ViewData["Title"] = "Home Page";
}
<div class="container-fluid" style="margin-top: 9.5vh">
    
    <div class="row ">
        <div class="col-12 text-center bg-black">
        </div>
    </div>
    
    <div class="row">
        <div class="col-9 hide-scrollbar">
            <div class="row text-center">

                @foreach (var item in Model!.MovieIndex!)
                {
                    <div class="col-3" style="padding-bottom: 25px">
                        <div class="movieborder">
                            <h4 class="movie-title">@Html.DisplayFor(model => item!.Title)</h4>
                            <a href="@Url.Action("Details", "Movies", new {id = item!.Id})">
                                <img width="80%" src="@Url.Content(item.ImageUrl)" alt="MoviePoster"/>
                            </a>
                            
                            @if (item.Is3D)
                            {
                                <img class="details-3D" src="@Url.Content("~/img/button-3d-movie-white.png")" alt="3D Logo">
                            }
                            <div class="details-container-time">
                                <hr/>

                                <p style="font-size: 1.9vh">Daily showtimes:</p>
                                <span  style="font-size: 1.7vh">•
                                @{
                                    foreach (var runtime in Model.MovieRuntimes?.Where(m => m.MovieId == item.Id).OrderBy(m => m.Time)!)
                                    {
                                        var time = runtime.Time.ToString(@"hh\:mm") + " • ";
                                        @Html.DisplayFor(m => time)
                                    }
                                }
                                </span>
                                <hr/>    
                                
                                <div class="details-container">
                                    <div class="justify-content-between d-flex">
                                        <button onclick="location.href='@Url.Action("Index", "Orders", new {id = item.Id})'"
                                                class="btn btn-primary btn-sizing me-1" style="font-size: 1.3vh">Buy Tickets</button>
                                        <button onclick="location.href='@Url.Action("Details", "Movies", new {id = item.Id})'"
                                                class="btn btn-primary btn-sizing ms-1" style="font-size: 1.3vh">Movie Details</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-3">
            
            <div class="text-center index-hall-overview">
                <div class="now-playing">

                @* <div class="form-group"> *@
                @*     @using (Html.BeginForm("SearchForMovie", "Home")) *@
                @*     { *@
                @*         <div class="col-md-12"> *@
                @*             <input type="text" name="searchPhrase" id="searchPhrase" class="form-control" placeholder="Search Movie Title"/> *@
                @*             <hr/> *@
                @*         </div> *@
                @*         <div class="form-group" style="float:left"> *@
                @*             <input type="submit" name="Search" class="btn btn-primary"/> *@
                @*         </div> *@
                @*     } *@
                @*     <div style="float:right"> *@
                @*         <button onclick="location.href='@Url.Action("Index", "Home")'" class="btn btn-primary">Clear List</button> *@
                @*     </div> *@
                @* </div> *@
                @* <br/><br/><br/> *@
                <h3 style="font-family: 'Poiret One', cursive; font-size: 3.0vh;"> Now playing </h3>
                @{
                    var halls = Model.Halls;
                    var movies = Model.Movies;

                    foreach (var hall in halls!)
                    {
                        <div class="row">
                            <p class="index-hall-title">HALL @Html.DisplayFor(m => hall.Id)</p>
                            @{
                                var movieIdNow = Model.ShowNow![hall.Id - 1].MovieId;
                                var movieNowDate = Model.ShowNow[hall.Id - 1].StartAt.Date;
                                var movieNowTitle = movies![movieIdNow - 1].Title;

                                if (movieNowDate != DateTime.Now.Date)
                                {
                                    movieNowTitle = "-";
                                }
                            }
                            <p class="index-hall-sm">Now playing: <span class="index-hall-lg">@Html.DisplayFor(m => movieNowTitle)</span></p>
                            @{
                                var movieIdNext = Model.ShowNext![hall.Id - 1].MovieId;
                                var movieNextTitle = movies[movieIdNext - 1].Title;
                                var movieNextDateTime = Model.ShowNext[hall.Id - 1].StartAt;
                                var movieNextTime = movieNextDateTime.ToLocalTime().TimeOfDay.ToString(@"hh\:mm") + "h";

                                if (movieNextDateTime.Date != DateTime.Today)
                                {
                                    movieNextTime = "tomorrow, " + movieNextTime;
                                }
                            }
                            <p class="index-hall-sm" style="  margin-bottom: 1vh;">Next (@Html.DisplayFor(m => movieNextTime)): <span onclick="location.href='@Url.Action("Details", "Movies", new {id = movieIdNext})'" class="index-hall-lg hover-orange" style="cursor: pointer">@Html.DisplayFor(m => movieNextTitle)</span></p>
                        </div>
                        <hr class="index-hall-hr"/>
                    }
                }
            </div>
            <div id="newsletterDiv" style="margin-top: 1vh;">
                <h4 class="movie-title" style="font-size: 2vh">Sign up for the newsletter</h4>
                <div class="row justify-content-center">
                    <div class="col-sm-5" id="inputEmail">
                        <input class="form-control" type="text" id="email" name="newsletter" placeholder="Enter Email" style="font-size: 1.4vh">
                    </div>
                    <button style="width: 20%; height: 20%; font-size: 1.3vh" onclick="checkEmail()" class="btn btn-primary ms-1">Sign up</button>
                </div>
            </div>
        </div>
    </div>
    </div>
    <div class="row">
         <div class="col-4 offset-8">
        </div>
    </div>
</div>


<script>
    function insertEmail(email) {
        $.ajax({
            url: '@Url.Action("InsertEmail", "Home")?email='+email,
            contentType: "text/plain; charset=utf-8",
            dataType: "text",
            success: function(){
                 document.getElementById("newsletterDiv").innerHTML = "<h4 class='movie-title'>Thank you for signing up!</h4>";
            },
            error: function(error){
                if(error.status === 400) {
                    invalidOrUsedEmail("This email is already signed up!");
                }
            }
        });
    }

    function invalidOrUsedEmail(errorText) {
        let emailDiv = document.getElementById("errorEmail");
        if(!emailDiv){
            email.classList.add("is-invalid");
            let element = document.createElement("div");
            element.id = "errorEmail";
            element.classList.add("invalid-feedback");
            element.appendChild(document.createTextNode(errorText));
            document.getElementById("inputEmail").appendChild(element);
        } else {
            emailDiv.innerHTML = errorText;
        }
    }

    function checkEmail() {
        let email = document.getElementById("email");
        if (validateEmail(email.value)) {
            insertEmail(email.value);
        } else {
            invalidOrUsedEmail("Please use a valid email");
        }
    }

    const validateEmail = (email) => {
        return String(email)
        .toLowerCase()
        .match(
            /^(([^<>()[\]\\.,;:\s@@"]+(\.[^<>()[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
        );
    };
</script>