using MovieHub.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore.Infrastructure
@using MovieHub.Controllers
@using MovieHub.ViewModels
@using SQLitePCL
@model MovieHub.ViewModels.ListRoleViewModel

@*@{
    async Task<string> addUserToRole(User user, IdentityRole roleToChange)
    {
        var editRoleViewModel = new EditRoleViewModel(user, roleToChange);

        await UserManagementController.AddRole(editRoleViewModel, @Model.UserManager, @Model.Context);

        return @Model.User.Id;
    }

    async Task<string> removeUserFromRole(User user, IdentityRole roleToChange)
    {
        var editRoleViewModel = new EditRoleViewModel(user, roleToChange);

        await UserManagementController.RemoveRole(editRoleViewModel, @Model.UserManager, @Model.Context);

        return @Model.User.Id;
    }
}*@



@{
    ViewData["Title"] = "Edit Users";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>User Management</h1>

<div class="text-center">
    <h1 class="display-4">Eddit Role</h1>
    @if ( @Model != null)
    {
        <table class="table">
            <thead>
            <tr>
                <th scope="col">First</th>
                <th scope="col">Last</th>
                <th scope="col">Email</th>
                <th scope="col">ID</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>@Model.User.FirstName</td>
                <td>@Model.User.LastName</td>
                <td>@Model.User.Email</td>
                <th scope="row">@Model.User.Id</th>
            </tr>
            </tbody>
        </table>
    }
    else
    {
        <h1 class="display-4">No user found</h1>
    }
    <table class="table">
        <thead>
                        <tr>
                            <th scope="col">Role</th>
                            <th scope="col">Added</th>
                            <th scope="col">Add or Remove</th>
                        </tr>
                        </thead>
        @foreach (IdentityRole role in @Model.RolesAdded)
        {
            <tbody>
            <tr>
                <td>@role.Name</td>
                <td>added</td>
                <td><button onclick="location.href='@Url.Action("AddRole", "UserManagement", new {user = @Model.User, roleToChange = @role})'" style="margin-top: 24px" class="btn btn-primary btn-sizing">Update status</button></td>

            </tr>
            </tbody>

        }
        @foreach (IdentityRole role in @Model.RolesNotAdded)
        {
            <tbody>
            <tr>
                <td>@role.Name</td>
                <td>not added</td>
                <td><button onclick="location.href='@Url.Action("AddRole", "UserManagement", new {user = @Model.User, roleToChange = @role})'" style="margin-top: 24px" class="btn btn-primary btn-sizing">Update status</button></td>

            </tr>
            </tbody>

        }
    </table>
</div>
